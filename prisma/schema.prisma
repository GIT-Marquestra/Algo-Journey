
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                  String              @id @default(uuid())
  username            String              @unique
  email               String              @unique
  password            String
  leetcodeUsername    String              @unique    
  isComplete          Boolean     
  codeforcesUsername  String              @unique        
  section             String
  enrollmentNum       String              @unique
  profileUrl          String?
  groupId             String?
  group               Group?              @relation(fields: [groupId], references: [id], onDelete: SetNull)
  submissions         Submission[]
  individualPoints    Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  applications        GroupApplication[]   @relation("GroupApplications")
  coordinatedGroup    Group?              @relation("GroupCoordinator") 
  contestPermissions  ContestPermission[]
  contestTime         TempContestTime[]
  
  @@index([groupId]) 
}


model TempContestQuestion {
  id                  String              @id @default(uuid())
  contestId           Int              
  questions           Question[]          @relation("QuestionToTemp")

}


model Group {
  id                String              @id @default(uuid())
  name              String              @unique
  coordinator       User                @relation("GroupCoordinator", fields: [coordinatorId], references: [id], onDelete: Cascade)
  coordinatorId     String              @unique
  members           User[]
  groupPermissions GroupPermission[]
  contestsAttempted GroupOnContest[]
  groupPoints       Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  applications      GroupApplication[]  @relation("GroupApplications")

  @@index([coordinatorId])
}

model GroupPermission {
  id                String              @id @default(uuid())
  groupId           String
  contestId         Int
  contest           Contest             @relation(fields: [contestId], references: [id])
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([groupId])
}

model Contest {
  id                  Int                 @id @default(autoincrement())
  startTime           DateTime
  name                String              @default("Contest")
  endTime             DateTime            
  status              ContestStatus       @default(UPCOMING) 
  duration            Int                 @default(0)
  groupPermissions    GroupPermission[]
  questions           QuestionOnContest[]
  submissions         Submission[]
  attemptedGroups     GroupOnContest[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  contestPermissions  ContestPermission[]

  @@index([status, startTime]) 
}

enum ContestStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

model TempContestTime {
  id                 String               @id @default(uuid())
  contestId          Int                  
  endTime            DateTime     
  userId             String               
  user               User                 @relation(fields: [userId], references: [id])                

}

model GroupOnContest {
  id                String              @id @default(uuid())
  groupId           String
  contestId         Int
  contest           Contest             @relation(fields: [contestId], references: [id])
  group             Group               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  score             Int                 @default(0)
  rank              Int?                
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([groupId, contestId])
  @@index([contestId, score]) 
}


model Question {
  id                String               @id @default(uuid())
  leetcodeUrl       String?         
  codeforcesUrl     String?          
  difficulty        Difficulty       
  points            Int
  questionTags      QuestionTag[]     
  inContest         Boolean               @default(false)
  inArena           Boolean               @default(false) 
  slug              String                @unique
  contests          QuestionOnContest[]   @relation("QuestionToContest")
  submissions       Submission[]          @relation("QuestionToSubmission")
  createdAt         DateTime              @default(now())
  temporary         TempContestQuestion[] @relation("QuestionToTemp")
  updatedAt         DateTime              @updatedAt
  hint              Hint?               

  @@map("questions")
}

model QuestionTag {
  id          String    @id @default(uuid())
  name        String    @unique
  questions   Question[]
  createdAt   DateTime  @default(now())
}

enum QuestionPlatform {
  LEETCODE
  CODEFORCES
}

enum Difficulty {
  BEGINNER
  EASY
  MEDIUM
  HARD
  VERYHARD
}

model Hint{
  id                String              @id @default(uuid())
  questionId        String              @unique
  question          Question            @relation(fields: [questionId], references: [id])
  hint1             String
  hint2             String
  hint3             String
}

model QuestionOnContest {
  id                String              @id @default(uuid())
  contestId         Int?
  questionId        String
  contest           Contest?            @relation(fields: [contestId], references: [id], onDelete: Cascade)
  question          Question            @relation("QuestionToContest", fields: [questionId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())

  @@unique([contestId, questionId])
}


model ContestPermission{
  id                String              @id @default(uuid())
  users             User[]
  contestId         Int
  contest           Contest             @relation(fields: [contestId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt 
}

model Submission {
  id                String              @id @default(uuid())
  userId            String
  questionId        String             
  contestId         Int?
  score             Int                 @default(0)
  status            SubmissionStatus   
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  question          Question            @relation("QuestionToSubmission", fields: [questionId], references: [id], onDelete: Cascade)
  contest           Contest?            @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())

  @@index([userId, contestId]) 
  @@index([contestId, score]) 
}


enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

model GroupApplication {
  id            String             @id @default(uuid())
  status        ApplicationStatus  @default(PENDING)
  applicantId   String
  groupId       String
  applicant     User               @relation("GroupApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  group         Group              @relation("GroupApplications", fields: [groupId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([applicantId, groupId])
  @@index([groupId, status])
  @@index([applicantId, status])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
